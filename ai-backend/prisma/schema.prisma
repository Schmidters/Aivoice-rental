// prisma/schema.prisma
// Version: Ava V6 — DB-first (no Redis)
env = "../.env"


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id         Int             @id @default(autoincrement())
  phone      String          @unique
  name       String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  messages   Message[]
  bookings   Booking[]
  properties LeadProperty[]
}

model Property {
  id         Int             @id @default(autoincrement())
  slug       String          @unique
  address    String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // One-to-one relation (no fields/references defined here)
  facts      PropertyFacts?
  messages   Message[]
  bookings   Booking[]
  leads      LeadProperty[]
  availability Availability[]
}

model PropertyFacts {
  id                 Int      @id @default(autoincrement())
  propertyId         Int      @unique
  slug               String   @unique
  address            String?
  buildingName       String?
  buildingType       String?
  unitType           String?
  units              Json?
  rent               String?
  deposit            String?
  leaseTerm          String?
  bedrooms           String?
  bathrooms          String?
  leaseType          String?
  sqft               String?
  parking            String?
  parkingOptions     String?
  utilities          String?
  includedUtilities  String?
  description        String?
  petsAllowed        Boolean?
  petPolicy          String?
  furnished          Boolean?
  availability       String?
  notes              String?
  floorPlans         Json?
  amenities          Json?
  managedBy          String?
  listingUrl         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  property           Property @relation(fields: [propertyId], references: [id])
}






model Message {
  id         Int        @id @default(autoincrement())
  role       String
  content    String
  createdAt  DateTime   @default(now())

  leadId     Int
  propertyId Int?
  lead       Lead       @relation(fields: [leadId], references: [id])
  property   Property?  @relation(fields: [propertyId], references: [id])
}

model Booking {
  id          Int        @id @default(autoincrement())
  datetime    DateTime
  duration    Int?       // minutes (default 30–60)
  status      String     @default("pending") // pending | confirmed | cancelled
  source      String?    // "sms", "dashboard", "manual"
  notes       String?
  createdAt   DateTime   @default(now())

  leadId      Int
  propertyId  Int?
  lead        Lead       @relation(fields: [leadId], references: [id])
  property    Property?  @relation(fields: [propertyId], references: [id])
}

model Availability {
  id           Int        @id @default(autoincrement())
  propertyId   Int
  startTime    DateTime
  endTime      DateTime
  isBlocked    Boolean    @default(false)
  notes        String?
  createdAt    DateTime   @default(now())

  property     Property   @relation(fields: [propertyId], references: [id])
}


model LeadProperty {
  leadId      Int
  propertyId  Int

  lead        Lead       @relation(fields: [leadId], references: [id])
  property    Property   @relation(fields: [propertyId], references: [id])

  @@id([leadId, propertyId])
}

model AgentPreference {
  id        Int     @id @default(autoincrement())
  openStart String
  openEnd   String
}

model GlobalSettings {
  id             Int      @id @default(autoincrement())
  openStart      String   @default("08:00")
  openEnd        String   @default("17:00")

  mondayStart    String   @default("08:00")
  mondayEnd      String   @default("17:00")
  tuesdayStart   String   @default("08:00")
  tuesdayEnd     String   @default("17:00")
  wednesdayStart String   @default("08:00")
  wednesdayEnd   String   @default("17:00")
  thursdayStart  String   @default("08:00")
  thursdayEnd    String   @default("17:00")
  fridayStart    String   @default("08:00")
  fridayEnd      String   @default("17:00")
  saturdayStart  String   @default("10:00")
  saturdayEnd    String   @default("14:00")
  sundayStart    String   @default("00:00")
  sundayEnd      String   @default("00:00")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CalendarAccount {
  id           Int      @id @default(autoincrement())
  userId       Int
  provider     String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, provider], name: "userId_provider")
}
