// --- prisma/schema.prisma ---
// Ava V6.1 — DB-only (Browse AI + Twilio + OpenAI)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- MODELS ----------

// Leads (people texting in)
model Lead {
  id         Int           @id @default(autoincrement())
  phone      String        @unique
  name       String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  messages   Message[]
  bookings   Booking[]
  properties LeadProperty[]
}

// Properties (physical listings)
model Property {
  id         Int           @id @default(autoincrement())
  slug       String        @unique
  address    String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  facts      PropertyFacts?
  messages   Message[]
  bookings   Booking[]
  leads      LeadProperty[]
}

// Facts scraped by Browse AI or Zapier init
model PropertyFacts {
  id         Int        @id @default(autoincrement())
  slug       String     @unique
  property   String?    // Full property title / address
  unit       String?
  rent       String?
  bedrooms   String?
  bathrooms  String?
  parking    String?
  utilities  String?
  summary    String?
  link       String?
  leadPhone  String?
  leadName   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// Messages between Ava and the lead
model Message {
  id         Int       @id @default(autoincrement())
  role       String    // 'user' or 'assistant'
  content    String
  createdAt  DateTime  @default(now())
  leadId     Int
  propertyId Int?

  // Relations
  lead       Lead      @relation(fields: [leadId], references: [id])
  property   Property? @relation(fields: [propertyId], references: [id])
}

// Bookings / showings
model Booking {
  id         Int       @id @default(autoincrement())
  datetime   DateTime
  source     String?   // 'ai' | 'human'
  createdAt  DateTime  @default(now())
  leadId     Int
  propertyId Int?

  // Relations
  lead       Lead      @relation(fields: [leadId], references: [id])
  property   Property? @relation(fields: [propertyId], references: [id])
}

// Many-to-many (Lead ↔ Property)
model LeadProperty {
  leadId     Int
  propertyId Int

  lead       Lead      @relation(fields: [leadId], references: [id])
  property   Property  @relation(fields: [propertyId], references: [id])

  @@id([leadId, propertyId])
}
